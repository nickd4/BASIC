; Copyright 2001 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;> Module header

 [ :LNOT: :DEF: standalone
                GBLL    standalone
standalone      SETL    {FALSE}         ; Default to ROM based
 ]
 [ :LNOT: :DEF: international_help
                GBLL    international_help
international_help SETL {TRUE}          ; Default to RISC OS 3.60+ internationalisation
 ]

        GET     ./VersionASM
        GET     ./WorkSpace.hdr
        GET     ./Tokens.hdr
        GET     ./Definitions.hdr
        GET     ListOpts
        GET     Macros
        GET     System
        GET     ModHand
        GET     MsgTrans
        GET     Services
        GET     FSNumbers
        GET     NewErrors
        GET     PaletteV
        GET     Wimp
        GET     ColourTran
        GET     ResourceFS
        GET     Territory
        GET     PublicWS
        GET     Sound
        GET     OsWords

RELEASEVER                     *       1              ;1 for release version: no Roger
OWNERRORS                      *       0              ;1 for english error messages in module
CHECKCRUNCH                    *       1              ;1 for BASIC$Crunch check on -quit and LIBRARY, INSTALL etc.
SAFECRUNCH                     *       15             ;15 is a nice safe looking number

                               GBLS    Name
                               GBLS    NameMsgs
 [ FPOINT=0
Name                           SETS    "BASIC"
 |
Name                           SETS    "BASIC64"
 ]
 [ standalone
NameMsgs                       SETS    "$Name.Msgs"
 |
NameMsgs                       SETS    "Messages"     ;share when not standalone
 ]

        AREA    |BASIC$$Code|, CODE, READONLY, PIC
        ENTRY

Module_BaseAddr                *       .

Basic_ModuleStart
        DCD     MODULEMAIN-Module_BaseAddr
 [ standalone
        DCD     Basic_Init-Module_BaseAddr
        DCD     Basic_Die-Module_BaseAddr
 |
        DCD     0                      ;Basic_Init
        DCD     0                      ;Basic_Die
 ]
        DCD     Basic_Services-Module_BaseAddr
        DCD     Basic_Title-Module_BaseAddr
        DCD     Basic_HelpStr-Module_BaseAddr
        DCD     Basic_HC_Table-Module_BaseAddr
        DCD     0
        DCD     0
        DCD     0
        DCD     0
 [ international_help
        DCD     Basic_MessageFile-Module_BaseAddr
 |
        DCD     0
 ]
 [ :LNOT:No32bitCode
        DCD     Basic_ModuleFlags-Module_BaseAddr
 ]

Basic_HC_Table

 [ international_help
        Command $Name, 255, 0, International_Help, Basic
        DCB     0
        ALIGN

Basic_Help
        DCB     "HBASBAS",0
Basic_Syntax
        DCB     "SBASBAS",0
 |
        Command $Name, 255, 0, 0, Basic
        DCB     0
        ALIGN

Basic_Help
        DCB     "$Name. is the ARM BBC BASIC interpreter."
        DCB     13
Basic_Syntax
        DCB     "Syntax: *$Name. [-help|-chain|-load|-quit] <filename>",0
 ]

Basic_MessageFile
        DCB     "Resources:$.Resources.BASIC.$NameMsgs.",0

Basic_Title
        DCB     "$Name.",0

Basic_HelpStr

 [ FPOINT=0
        DCB     "BBC BASIC V",9,"$Module_HelpVersion", 0
 |
        DCB     "BBC BASIC VI",9,"$Module_HelpVersion", 0
 ]
        ALIGN

 [ :LNOT:No32bitCode
Basic_ModuleFlags
        DCD     ModuleFlag_32bit
 ]

 [ standalone
Basic_Init
        MOV     R6,LR
        ADRL    R0,Basic_ResFiles
        SWI     XResourceFS_RegisterFiles
        MOV     PC,R6

Basic_Die
        MOV     R6,LR
        ADRL    R0,Basic_ResFiles
        SWI     XResourceFS_DeregisterFiles
        CLRV
        MOV     PC,R6

Basic_ReRegRes
        Push    "R0,LR"
        ADRL    R0,Basic_ResFiles
        MOV     LR,PC
        MOV     PC,R2
        Pull    "R0,PC"
 ]

Basic_ServicesTable
        DCD     0
        DCD     Basic_ServicesBody-Module_BaseAddr
        ASSERT  Service_Memory < Service_ResourceFSStarting
        DCD     Service_Memory
 [ standalone
        DCD     Service_ResourceFSStarting
 ]
        DCD     0

;In r0 -> rest of command line
;r1 = number of parameters to *ab

Basic_Code
        MOV     R3,R14
        MOV     R2,R0
        MOV     R0,#ModHandReason_Enter
        ADR     R1,Basic_Title
        SWI     XOS_Module
        MOV     PC,R3

        DCD     Basic_ServicesTable-Module_BaseAddr

Basic_Services
        MOV     R0,R0
        CMP     R1,#Service_Memory
 [ standalone
        CMPNE   R1,#Service_ResourceFSStarting
 ]
        MOVNE   PC,R14

Basic_ServicesBody
 [ standalone
        TEQ     R1,#Service_ResourceFSStarting
        BEQ     Basic_ReRegRes
 ]
        ADR     R12,Basic_ModuleStart
        CMP     R2,R12                 ;R2 contains the address of the currently active object
        ADDHS   R12,R12,#(Basic_End - Basic_ModuleStart):AND:&0000FF
        ADDHS   R12,R12,#(Basic_End - Basic_ModuleStart):AND:&00FF00
        ADDHS   R12,R12,#(Basic_End - Basic_ModuleStart):AND:&FF0000
        CMPHS   R12,R2
        BHS     MOVEMEMORY             ;claim service - it's in us
        MOV     PC,R14

        LNK     Basic.s
